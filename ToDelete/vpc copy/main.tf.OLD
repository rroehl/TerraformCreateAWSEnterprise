terraform {
  required_version = ">= 1.3.7" 
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 2.7.0"
      configuration_aliases = [ aws ]
    }
  }
}
//Get the VPCs info from structure
locals {
  vpcs =  flatten([
    for region_key, region_obj in var.RegionMap : [
      for vpc_key, vpc_obj in region_obj.vpc_info :  {
        region_name = region_key
        vpc_name = vpc_key
        vpc_environment_type = vpc_obj.vpc_environment_type
        vpc_cidr_block = vpc_obj.vpc_cidr_block 
        vpc_enable_dns_support = vpc_obj.vpc_enable_dns_support
        vpc_enable_dns_hostnames = vpc_obj.vpc_enable_dns_hostnames 
        vpc_uuid = vpc_obj.vpc_uuid   
        /*vpc_instance_tenancy = vpc_obj.vpc_instance_tenancy
				vpc_enable_classiclink_dns_support = vpc_obj.vpc_enable_classiclink_dns_support
				vpc_assign_generated_ipv6_cidr_block = vpc_obj.vpc_assign_generated_ipv6_cidr_block
        vpc_enable_classiclink   = vpc_obj.vpc_enable_classiclink */
      }  
    ]
    
  ])
}

#Create a VPCs
resource "aws_vpc" "this" {

  for_each = {
    for vpc in local.vpcs :  "${vpc.vpc_name}" => vpc if vpc.region_name == var.vpc_region
    }
    cidr_block = each.value.vpc_cidr_block
    enable_dns_support= each.value.vpc_enable_dns_support
    enable_dns_hostnames = each.value.vpc_enable_dns_hostnames  
	//instance_tenancy     = each.value.vpc_instance_tenancy
    //enable_classiclink   =  each.value.vpc_enable_classiclink
	//enable_classiclink_dns_support =  each.value.vpc_enable_classiclink_dns_support
	//assign_generated_ipv6_cidr_block =  each.value.vpc_assign_generated_ipv6_cidr_block

    tags = {
      "Name"     = format("%s", each.value.vpc_name)
      Region     = each.value.region_name
      "Environment_Type" = each.value.vpc_environment_type
      "Date_created" = formatdate("DD MMM YYYY hh:mm ZZZ", timestamp())
      "uuid" = each.value.vpc_uuid
    }
}

//Get the VPCs additional CIDR blocks from structure
locals {
  vpcs_cidr_block_lists =  flatten([
    for region_key, region_obj in var.RegionMap : [
      for vpc_key, vpc_obj in region_obj.vpc_info :  [
            for cidr_block_list_key, cidr_block_list_obj in vpc_obj.vpc_cidr_block_list_info : {
                vpc_region_name = region_key
                vpc_name = vpc_key
                vpc_environment_type = vpc_obj.vpc_environment_type
                vpc_cidr_block = vpc_obj.vpc_cidr_block 
                secondary_cidr_name = cidr_block_list_key
                secondary_cidr = cidr_block_list_obj.cidr
                secondary_cidr_info = cidr_block_list_obj.info

            }  
      ]
    ]
  ])
}

// Create CIDR Blocks
resource "aws_vpc_ipv4_cidr_block_association" "secondary_cidr" {
    for_each = {
        for list in   local.vpcs_cidr_block_lists : "Region: ${list.vpc_region_name} Managed List name: ${list.vpc_name}Secondary CIDR  name: ${list.secondary_cidr_name}" => list  if list.vpc_region_name == var.vpc_region
    }
   vpc_id     = lookup(aws_vpc.this, "${each.value.vpc_name}").id 
   cidr_block = each.value.secondary_cidr
}


# Get the Subnets info
locals {
  // outer map key: vpc Name
  // inner map key: vpc object
  // outer map key: AZ Name
  // inner map key: Az map
  // outer map value: subnet CIDR
  // inner map key: subnet object

  vpc_network_subnets =  flatten([
    for region_key, region_obj in var.RegionMap : [
      for vpc_key, vpc_obj in region_obj.vpc_info : [
        for az_key, az_subnet_objs in vpc_obj.az_info : [
          for subnet_key, subnet_obj in az_subnet_objs : {
            vpc_region_name = region_key
            vpc_name = vpc_key
            vpc_uuid = vpc_obj.vpc_uuid
            az_name = az_key
            vpc_cidr_block = vpc_obj.vpc_cidr_block 
            vpc_enable_dns_support = vpc_obj.vpc_enable_dns_support
            vpc_enable_dns_hostnames = vpc_obj.vpc_enable_dns_hostnames
            vpc_environment_type = vpc_obj.vpc_environment_type
            cidr_block = subnet_key
            sn_class_type = subnet_obj.sn_class_type
            sn_uuid = subnet_obj.sn_uuid
            } 
        ]
      ]
    ]
  ])
}

# Create Subnets
/*resource "aws_subnet" "create_subnets" {
    
   depends_on = [aws_vpc_ipv4_cidr_block_association.secondary_cidr]   //local.vpc_depends_on] 

  for_each = {
    for subnet in local.vpc_network_subnets :  "${subnet.vpc_name}.${subnet.az_name}.${subnet.cidr_block}" => subnet if subnet.vpc_region_name == var.vpc_region
    }
  //vpc_id = lookup(aws_vpc.this, "${each.value.vpc_name}").id 
  vpc_id = [for key, obj in values(data.aws_vpc.selected).*: obj.id  if obj.tags.uuid== "${each.value.vpc_uuid}"][0] 

  cidr_block =  each.value.cidr_block
  availability_zone = each.value.az_name
  map_public_ip_on_launch = false

  tags = {
      Name = join( " ", ["${each.key}"])
      CIDR_block = each.value.cidr_block
      "Environment_Type" =  each.value.vpc_environment_type
      "Subnet Class_Type"  = each.value.sn_class_type
      "uuid"  = each.value.sn_uuid
      "Availability_Zone" = each.value.az_name
      "VPC" = each.value.vpc_name
      "Date_created" = formatdate("DD MMM YYYY hh:mm ZZZ", timestamp())
  } 
}
*/



#Build Test Nodes------------------------------------------
/*
resource "aws_network_interface" ComputeNodeNetworkInteface {
	#depends_on = []

    for_earch ={
       for key, object in aws_subnet.create_subnets : key => object.id if (object.vpc_id == lookup(aws_vpc.this, "${each.value.vpc_name}").id ) && (object.tags["SubnetType"] == each.value.subnet_type)
    }


	description = "Test Instance Network Interface"
	subnet_id = sort(data.aws_subnet_ids.NodeSubnetId.ids)[0]
	security_groups = [ data.aws_security_group.QRMSecurityGroup.id,data.aws_security_group.RDPSecurityGroup.id,data.aws_security_group.ManagementSecurityGroup.id]
	private_ips = [ lookup( lookup( var.DataNodePrivateIPMap, var.QRMEnvironmentType), var.QRMAvailabilityZoneIndex)]

    security_groups = [ data.aws_security_group.QRMSecurityGroup.id,data.aws_security_group.RDPSecurityGroup.id,data.aws_security_group.ManagementSecurityGroup.id]

	tags = {
	    Name = join( "", ["QRMDataNode", lookup( var.EnvironmentTypeName,  var.QRMEnvironmentType),"W",var.QRMAvailabilityZoneIndex,"QRMNetwork"])
		Environment = var.QRMEnvironmentType
    	"Environment Index" = var.QRMAvailabilityZoneIndex

        Name = join( " ", ["${each.key}"])
        CIDR_block = each.value.cidr_block
        "Environment Type" =  each.value.vpc_environment_type
        SubnetType  = each.value.subnet_type
        "Availability Zone" = each.value.az_name
        "VPC" = each.value.vpc_name
        "Date_created" = formatdate("DD MMM YYYY hh:mm ZZZ", timestamp())
	}


  count = var.BatchSize

	tags = {
	    Name = join( "", ["QRMComputeNode", tostring( count.index + 1),lookup( var.EnvironmentTypeName,  var.QRMEnvironmentType),"W",var.QRMAvailabilityZoneIndex,"QRMNetwork"])
		  Environment = var.QRMEnvironmentType
    	"Environment Index" = var.QRMAvailabilityZoneIndex
      Index = count.index
	} 
} 



resource "aws_instance" ComputeNodeCluster {
	depends_on = [ aws_network_interface.ComputeNodeNetworkInteface]
	ami = lookup( lookup( var.RegionComputeInstanceMap, var.region), var.QRMEnvironmentType)
	instance_type = var.ComputeInstanceType
	key_name = var.QRMKeyName
	iam_instance_profile  = "ComputeInstanceProfile"	

  count = var.BatchSize
	
	#ebs volumes done thru attachements
//	associate_public_ip_address = false
 // vpc_security_group_ids = [ data.aws_security_group.QRMSecurityGroup.id,data.aws_security_group.RDPSecurityGroup.id,data.aws_security_group.ManagementSecurityGroup.id]
 // subnet_id = sort(data.aws_subnet_ids.NodeSubnetId.ids)[0]

	network_interface {
		device_index = 0
		network_interface_id = aws_network_interface.ComputeNodeNetworkInteface[count.index].id
		delete_on_termination = false
		} 

	volume_tags = {
		Name = join( "", ["QRM",lookup( var.EnvironmentTypeName,  var.QRMEnvironmentType),var.QRMAvailabilityZoneIndex,"ComputeNode", tostring( count.index + 1), "-C-drive"])
		Environment = var.QRMEnvironmentType
    "Environment Index" = var.QRMAvailabilityZoneIndex
	}
		
	tags = {
	  Name = join( "", ["AW",lookup( var.EnvironmentTypeName,  var.QRMEnvironmentType),"W",var.QRMAvailabilityZoneIndex,"QRMComputeNode", tostring( count.index + 1)])
		Environment = var.QRMEnvironmentType
		Platform = "QRM"
    "Environment Index" = var.QRMAvailabilityZoneIndex
	}
}
*/
#-----------------------------------------------------------










/* ROBB


#Tag the VPC default router 
resource "aws_ec2_tag" "UpdateDefaultRouterTags" {

  for_each = {
    for vpc in local.vpcs :  "${vpc.vpc_name}" => vpc if vpc.region_name == var.vpc_region
    }

    resource_id = lookup(aws_vpc.this, "${each.value.vpc_name}").default_route_table_id 
    key = "Name"
    value = format("%s.DefaultRouter", each.value.vpc_name)
}
#Tag the VPC default network ACL 
resource "aws_ec2_tag" "UpdateDefaultNetworkACLsTags" {

  for_each = {
    for vpc in local.vpcs :  "${vpc.vpc_name}" => vpc if vpc.region_name == var.vpc_region
    }

    resource_id = lookup(aws_vpc.this, "${each.value.vpc_name}").default_network_acl_id 
    key = "Name"
    value = format("%s.DefaultNetworkACLs", each.value.vpc_name)
}
#Tag the VPC default security group 
resource "aws_ec2_tag" "UpdateDefualtSecurityGroupTags" {

  for_each = {
    for vpc in local.vpcs :  "${vpc.vpc_name}" => vpc if vpc.region_name == var.vpc_region
    }

    resource_id = lookup(aws_vpc.this, "${each.value.vpc_name}").default_security_group_id 
    key = "Name"
    value = format("%s.DefaultSecurityGroup", each.value.vpc_name)
}


//Loop thru managed CIDR lists to retrieve the CIDR entries
//for_each = {
      //  for list in local.vpc_managed_CIDR_lists_info : "Region: ${list.vpc_region_name} Managed List name: ${list.managed_CIDR_list_name} CIDR Entry name: ${list.cidr_entry_name}" => list  if list.vpc_region_name == var.vpc_region
    //}
locals {
    vpc_managed_CIDR_lists_entries = flatten ([
        for region_key, region_obj in var.RegionMap : [
            for CIDR_list_key, CIDR_list_obj in region_obj.region_managed_CIDR_list_info : [
                for cidr_entries_key, cidr_entries_obj in CIDR_list_obj.cidr_entries : {
                    vpc_region_name = region_key
                    managed_CIDR_list_name = CIDR_list_key  //CIDR_list1
                    address_family = CIDR_list_obj.address_family
                    max_entries = CIDR_list_obj.max_entries

                    cidr_entry_name = cidr_entries_key  // entry1
                    cidr_entry = cidr_entries_obj.cidr_entry
                    cidr_description = cidr_entries_obj.cidr_description
                    
               }
            ]   
        ]
        
    ])
}

//Loop thru managed CIDR lists to retrieve the CIDR list name
locals {
    vpc_managed_CIDR_lists_info = flatten ([
        for region_key, region_obj in var.RegionMap : [
            for CIDR_list_key, CIDR_list_obj in region_obj.region_managed_CIDR_list_info : {
                vpc_region_name = region_key
                managed_CIDR_list_name = CIDR_list_key  //CIDR_list1
                address_family = CIDR_list_obj.address_family
                max_entries = CIDR_list_obj.max_entries
                cidr_entries = CIDR_list_obj.cidr_entries
            }   
        ]
        
    ])
}

//Create region managed prefix CIDR lists
resource "aws_ec2_managed_prefix_list" "this" {
    for_each = {
        for list in local.vpc_managed_CIDR_lists_info : "Region: ${list.vpc_region_name} Managed List name: ${list.managed_CIDR_list_name}" => list  if list.vpc_region_name == var.vpc_region
    }
        name           = each.value.managed_CIDR_list_name
        address_family = each.value.address_family 
        max_entries    = each.value.max_entries

        dynamic "entry" {
            for_each = each.value.cidr_entries //cidr_entries
            content {
            cidr = entry.value["cidr_entry"]
            description = entry.value["cidr_description"]
            }
        }

        tags = {
            Region = each.value. vpc_region_name
            "Date_created" = formatdate("DD MMM YYYY hh:mm ZZZ", timestamp())
        }
}

//Get the VPCs security groupinfo from structure
locals {
  vpcs_security_groups =  flatten([
    for region_key, region_obj in var.RegionMap : [
      for vpc_key, vpc_obj in region_obj.vpc_info :  [
            for security_group_list_key, security_group_list_obj in vpc_obj.security_groups_list_info : {
                vpc_region_name = region_key
                vpc_name = vpc_key
                vpc_environment_type = vpc_obj.vpc_environment_type
                vpc_cidr_block = vpc_obj.vpc_cidr_block 
                sg_name = security_group_list_key
                sg_description = security_group_list_obj.description
                sg_ingress_description = security_group_list_obj.ingress.description
                sg_ingress_from_port = security_group_list_obj.ingress.from_port
                sg_ingress_to_port = security_group_list_obj.ingress.to_port
                sg_ingress_protocol = security_group_list_obj.ingress.protocol
                sg_ingress_cidr_blocks = security_group_list_obj.ingress.cidr_blocks
                sg_egress_from_port = security_group_list_obj.egress.from_port
                sg_egress_to_port = security_group_list_obj.egress.to_port
                sg_egress_protocol = security_group_list_obj.egress.protocol
                sg_egress_cidr_blocks = security_group_list_obj.egress.cidr_blocks


            }  
      ]
    ]
    
  ])
}

// Create security groups for VPCs
resource "aws_security_group" "this" {

    for_each = {
        for list in local.vpcs_security_groups : "Region: ${list.vpc_region_name} VPC: ${list.vpc_name} Security Group: ${list.sg_name}" => list  if list.vpc_region_name == var.vpc_region
    }

        //depends_on = [join("", ["aws_vpc.", local.vpc_depends_on])]   //local.vpc_depends_on] 

        name        = each.value.sg_name
        description = each.value.sg_description
        vpc_id      = lookup(aws_vpc.this, "${each.value.vpc_name}").id 

        ingress {
            description      = each.value.sg_ingress_description
            from_port        = each.value.sg_ingress_from_port
            to_port          = each.value.sg_ingress_to_port
            protocol         = each.value.sg_ingress_protocol 
            cidr_blocks      = each.value.sg_ingress_cidr_blocks
        }

        egress {
            from_port        = each.value.sg_egress_from_port
            to_port          = each.value.sg_egress_to_port
            protocol         = each.value.sg_egress_protocol
            cidr_blocks      = each.value.sg_egress_cidr_blocks
        }

        tags = {
            Name = each.value.sg_name
            Region = each.value. vpc_region_name
            VPC = each.value.vpc_name
            "Date_created" = formatdate("DD MMM YYYY hh:mm ZZZ", timestamp())
        }
}



//Get the VPCs Network ACLs info from structure
locals {
  vpcs_network_acls =  flatten([
    for region_key, region_obj in var.RegionMap : [
      for vpc_key, vpc_obj in region_obj.vpc_info :  [
            for network_acls_list_key, network_acls_list_obj in vpc_obj.network_acls_list_info : {
                vpc_region_name = region_key
                vpc_name = vpc_key
                vpc_environment_type = vpc_obj.vpc_environment_type
                vpc_cidr_block = vpc_obj.vpc_cidr_block 
                network_acl_name = network_acls_list_key
                description = network_acls_list_obj.description
                subnet_type = network_acls_list_obj.subnet_type
            }  
       ]
    ]
  ])
}
// Create VPC network acls
resource "aws_network_acl" "CreateNetworkAcls" {
    for_each = {
        for list in local.vpcs_network_acls : "Region: ${list.vpc_region_name} Managed List name: ${list.vpc_name} Network acl name: ${list.network_acl_name}" => list if list.vpc_region_name == var.vpc_region
    }
    vpc_id = lookup(aws_vpc.this, "${each.value.vpc_name}").id 

    // A list of Subnet IDs by vpc and subnet type to apply the ACL to
    subnet_ids = values(
        {for key, object in aws_subnet.create_subnets : key => object.id if (object.vpc_id == lookup(aws_vpc.this, "${each.value.vpc_name}").id ) && (object.tags["SubnetType"] == each.value.subnet_type)}
        
        )
    tags = {
        Name = each.value.network_acl_name 
        Description = each.value.description
        Region = each.value. vpc_region_name
        VPC = each.value.vpc_name
        Subnet_Type = each.value.subnet_type
        "Date_created" = formatdate("DD MMM YYYY hh:mm ZZZ", timestamp())
    } 
}

//Get the VPCs Network ACLs ingress rule info from structure
locals {
  vpcs_network_acls_ingress_rules =  flatten([
    for region_key, region_obj in var.RegionMap : [
      for vpc_key, vpc_obj in region_obj.vpc_info :  [
            for network_acls_list_key, network_acls_list_obj in vpc_obj.network_acls_list_info : [
                for rule_key, rule_object in network_acls_list_obj.ingress_obj_list : {
                vpc_region_name = region_key
                vpc_name = vpc_key
                vpc_environment_type = vpc_obj.vpc_environment_type
                vpc_cidr_block = vpc_obj.vpc_cidr_block 
                network_acl_name = network_acls_list_key
                rule = rule_key
                protocol = rule_object.protocol
                rule_no = rule_object.rule_no
                action = rule_object.action
                cidr_block = rule_object.cidr_block
                from_port = rule_object.from_port
                to_port = rule_object.to_port
                }
            ]  
      ]
    ]
    
  ])
}
// Create the ingress rules
resource "aws_network_acl_rule" "this" {
    for_each = {
        for list in local.vpcs_network_acls_ingress_rules : "Region: ${list.vpc_region_name} Managed List name: ${list.vpc_name} Network acl name: ${list.network_acl_name} Rule: ${list.rule}" => list if list.vpc_region_name == var.vpc_region
    }
    network_acl_id = lookup(aws_network_acl.CreateNetworkAcls, "Region: ${each.value.vpc_region_name} Managed List name: ${each.value.vpc_name} Network acl name: ${each.value.network_acl_name}").id 
    protocol       = each.value.protocol
    rule_number    = each.value.rule_no
    egress         = false 
    rule_action    = each.value.action
    cidr_block     = each.value.cidr_block
    from_port      = each.value.from_port
    to_port        = each.value.to_port
}

//Get the VPCs Network ACLs egress rule info from structure
locals {
  vpcs_network_acls_egress_rules =  flatten([
    for region_key, region_obj in var.RegionMap : [
      for vpc_key, vpc_obj in region_obj.vpc_info :  [
            for network_acls_list_key, network_acls_list_obj in vpc_obj.network_acls_list_info : [
                for rule_key, rule_object in network_acls_list_obj.egress_obj_list : {
                vpc_region_name = region_key
                vpc_name = vpc_key
                vpc_environment_type = vpc_obj.vpc_environment_type
                vpc_cidr_block = vpc_obj.vpc_cidr_block 
                network_acl_name = network_acls_list_key
                rule = rule_key
                protocol = rule_object.protocol
                rule_no = rule_object.rule_no
                action = rule_object.action
                cidr_block = rule_object.cidr_block
                from_port = rule_object.from_port
                to_port = rule_object.to_port
                }
            ]  
      ]
    ]
    
  ])
}
// Create the egress rules
resource "aws_network_acl_rule" "egress" {
    for_each = {
        for list in local.vpcs_network_acls_egress_rules : "Region: ${list.vpc_region_name} Managed List name: ${list.vpc_name} Network acl name: ${list.network_acl_name} Rule: ${list.rule}" => list if list.vpc_region_name == var.vpc_region
    }
    network_acl_id = lookup(aws_network_acl.CreateNetworkAcls, "Region: ${each.value.vpc_region_name} Managed List name: ${each.value.vpc_name} Network acl name: ${each.value.network_acl_name}").id 
    protocol       = each.value.protocol
    rule_number    = each.value.rule_no
    egress         = true 
    rule_action    = each.value.action
    cidr_block     = each.value.cidr_block
    from_port      = each.value.from_port
    to_port        = each.value.to_port

}

 
ROBB */





# Get the route table info
//locals {
  // outer map key: vpc Name
  // inner map key: vpc object
  // outer map key: route table Name
  // inner map key: routetable map


  //vpc_route_tables =  flatten([
    //for region_key, region_obj in var.RegionMap : [
      //for vpc_key, vpc_obj in region_obj.vpc_info : [
        //for route_table_key, route_table in vpc_obj.route_table_info : {
            //for type, types in route_table  : [
                //for type_key, type_value in types : {
          //          vpc_region_name = region_key
            //        vpc_name = vpc_key
              //      route_table_name = route_table_key
                //}
           // ]
        //}
      //]
    //]
  //])
//}

#Create VPC route tables 
/*
resource "aws_route_table" "this" {

    for_each = {
    for route_table in local.vpc_route_tables :  "${route_table.vpc_name}.${route_table.route_table_name}" => route_table if route_table.vpc_region_name == var.vpc_region
    }

    vpc_id = lookup(aws_vpc.this, "${each.value.vpc_name}").id 

    route = []

    tags = {
        Name = join( " ", ["${each.value.route_table_name}"])
    }


} 
*/